// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Veggerby.Greenhouse.Core;

namespace Veggerby.Greenhouse.Core.Migrations
{
    [DbContext(typeof(GreenhouseContext))]
    [Migration("20200602073827_AllowNulls")]
    partial class AllowNulls
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Annotation", b =>
                {
                    b.Property<int>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnnotationId");

                    b.HasIndex("MeasurementId");

                    b.ToTable("Annotations");
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Device", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Measurement", b =>
                {
                    b.Property<int>("MeasurementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FirstTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<double?>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double?>("MinValue")
                        .HasColumnType("float");

                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("SumValue")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Value")
                        .HasColumnType("float");

                    b.HasKey("MeasurementId");

                    b.HasIndex("PropertyId");

                    b.HasIndex("DeviceId", "SensorId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Property", b =>
                {
                    b.Property<string>("PropertyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("Decimals")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Tolerance")
                        .HasColumnType("float");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = "temperature",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 3,
                            Name = "Temperature",
                            Tolerance = 0.14999999999999999,
                            Unit = "°C"
                        },
                        new
                        {
                            PropertyId = "humidity",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 3,
                            Name = "Relative Humidity",
                            Tolerance = 0.5,
                            Unit = "%"
                        },
                        new
                        {
                            PropertyId = "pressure",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 1,
                            Name = "Pressure",
                            Tolerance = 1.0,
                            Unit = "mbar"
                        },
                        new
                        {
                            PropertyId = "soil_humidity",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "Soil Humidity",
                            Tolerance = 100.0
                        },
                        new
                        {
                            PropertyId = "battery_charge",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "Battery Charge",
                            Tolerance = 0.10000000000000001,
                            Unit = "%"
                        },
                        new
                        {
                            PropertyId = "battery_temperature",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "Battery Temperature",
                            Tolerance = 0.10000000000000001,
                            Unit = "°C"
                        },
                        new
                        {
                            PropertyId = "battery_voltage",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "Battery Voltage",
                            Tolerance = 5.0,
                            Unit = "mV"
                        },
                        new
                        {
                            PropertyId = "io_voltage",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "I/O Voltage",
                            Tolerance = 10.0,
                            Unit = "mV"
                        },
                        new
                        {
                            PropertyId = "io_current",
                            CreatedUtc = new DateTime(2020, 6, 2, 7, 38, 27, 71, DateTimeKind.Utc).AddTicks(8930),
                            Decimals = 0,
                            Name = "I/O Current",
                            Tolerance = 1.0,
                            Unit = "mA"
                        });
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Sensor", b =>
                {
                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SensorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId", "SensorId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Annotation", b =>
                {
                    b.HasOne("Veggerby.Greenhouse.Core.Measurement", "Measurement")
                        .WithMany("Annotations")
                        .HasForeignKey("MeasurementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Measurement", b =>
                {
                    b.HasOne("Veggerby.Greenhouse.Core.Device", "Device")
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId");

                    b.HasOne("Veggerby.Greenhouse.Core.Property", "Property")
                        .WithMany("Measurements")
                        .HasForeignKey("PropertyId");

                    b.HasOne("Veggerby.Greenhouse.Core.Sensor", "Sensor")
                        .WithMany("Measurements")
                        .HasForeignKey("DeviceId", "SensorId");
                });

            modelBuilder.Entity("Veggerby.Greenhouse.Core.Sensor", b =>
                {
                    b.HasOne("Veggerby.Greenhouse.Core.Device", "Device")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
